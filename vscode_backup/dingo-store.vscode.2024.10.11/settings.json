{
  "clangd.path": "/home/server/.vscode-server/data/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/18.1.3/clangd_18.1.3/bin/clangd",
  // 是否检查插件冲突
  "clangd.detectExtensionConflicts": true,
  //"C_Cpp.default.intelliSenseMode": "disabled",
  "C_Cpp.errorSquiggles": "disabled",
  "C_Cpp.intelliSenseEngine": "disabled",
  "C_Cpp.intelliSenseEngineFallback": "disabled",
  "C_Cpp.autocomplete": "disabled",
  // 查找的头文件路径，每一项前缀 -I
  "clangd.fallbackFlags": [
    "-I${workspaceFolder}/include"
  ],
  "clangd.serverCompletionRanking": true,
  // 粘贴时格式化文件
  "editor.formatOnPaste": false,
  // 保存时格式化文件
  "editor.formatOnSave": true,
  "clangd.arguments": [
    // 让 Clangd 生成更详细的日志
    "--log=verbose",
    // 在后台自动分析文件(基于 complie_commands，我们用CMake生成)
    "--background-index",
    // 标记compelie_commands.json文件的目录位置
    "--compile-commands-dir=build",
    // 同时开启的任务数量
    "-j=120",
    // 全局补全(输入时弹出的建议将会提供 CMakeLists.txt 里配置的所有文件中可能的符号，会自动补充头文件)
    "--all-scopes-completion",
    // 更详细的补全内容
    "--completion-style=detailed",
    // Include what you use
    "--header-insertion=iwyu",
    // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
    "--header-insertion-decorators",
    // pch优化的位置 disk memory
    "--pch-storage=memory",
    // 跨文件重命名变量
    "--cross-file-rename",
    "--enable-config",
    // clang-format style to apply by default when no .clang-format file is found
    "--fallback-style=google",
    // 输出的 JSON 文件更美观
    "--pretty",
    "--query-driver=/home/server/app/llvm-project-llvmorg-17.0.6/bin/clang++",
    // 启用 Clang-Tidy 以提供「静态检查」
    "--clang-tidy",
    // Clang-Tidy 静态检查的参数，指出按照哪些规则进行静态检查，详情见「与按照官方文档配置好的 VSCode 相比拥有的优势」
    // 参数后部分的*表示通配符
    // 在参数前加入-，如-modernize-use-trailing-return-type，将会禁用某一规则
    "--clang-tidy-checks=cppcoreguidelines-*,performance-*,bugprone-*,portability-*,modernize-*,google-*",
    // 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
    // 我选择启用
    "--function-arg-placeholders=true",
    // "--path-mappings=/data1/server/work/dingo-store=/home/server/work/dingo-store",
    //"--path-mappings=/home/server/work/dingo-store=/data1/server/work/dingo-store",
    "--malloc-trim",
    //"nvim-lspconfig",
  ],
  // clangd的snippets有很多的跳转点，不用这个就必须手动触发Intellisense了
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  "clangd.onConfigChanged": "restart", // 重启 clangd 时重载配置,具体方法: F1 + Fn 打开命令面板，然后搜索“clangd: restart"
  /********
   * LLDB *
   ********/
  //LLDB 指令自动补全
  "lldb.commandCompletions": true,
  //LLDB 指针显示解引用内容
  "lldb.dereferencePointers": true,
  //LLDB 鼠标悬停在变量上时预览变量值
  "lldb.evaluateForHovers": true,
  //LLDB 监视表达式的默认类型
  "lldb.launch.expressions": "simple",
  //LLDB 不显示汇编代码
  "lldb.showDisassembly": "never",
  //LLDB 生成更详细的日志
  "lldb.verboseLogging": true,
  "clangd.checkUpdates": false,
  "cmakeFormat.exePath": "/home/server/.local/bin/cmake-format",
  "google-translate.firstLanguage": "en",
  "google-translate.maxSizeOfResult": 200,
  "cmake.configureOnEdit": false,
  "files.trimTrailingWhitespace": true,
  "cpp-check-lint.cppcheck.--std_c++=": "c++17",
  "cpp-check-lint.cppcheck.--std_c=": "c11",
  "cSpell.words": [
    "alsologtostderr",
    "ANNID",
    "beamwidth",
    "BOOLLIST",
    "braft",
    "brpc",
    "bruteforce",
    "bthread",
    "bthreads",
    "butil",
    "Bvar",
    "codebook",
    "COMPAREANDSET",
    "consine",
    "COUNTWITHNULL",
    "cppcheck",
    "dingodb",
    "diskann",
    "distrib",
    "dists",
    "DOUBLELIST",
    "EBRAFT",
    "EDISKANN",
    "efconstruction",
    "EFILE",
    "EILLEGAL",
    "EINDEX",
    "EINTERNAL",
    "EKEY",
    "ENOT",
    "ERAFT",
    "EREGION",
    "EREQUEST",
    "ESCAN",
    "ESTORE",
    "EVECTOR",
    "faiss",
    "FAKEBUILDED",
    "flagfile",
    "FLOATLIST",
    "fvec",
    "fvecs",
    "gflags",
    "glog",
    "haijun",
    "Hnsw",
    "hnswlib",
    "hsnw",
    "indexs",
    "INTEGERLIST",
    "IVFPQ",
    "labeltype",
    "Libexpr",
    "lims",
    "loadu",
    "logbuflevel",
    "logbufsecs",
    "logtostderr",
    "logtostdout",
    "LONGLIST",
    "medoid",
    "medoids",
    "minloglevel",
    "mvcc",
    "myequalkey",
    "ncentroids",
    "nlinks",
    "nontxn",
    "normlize",
    "NOTLEADER",
    "nprobe",
    "nsubvector",
    "numpy",
    "PARAMTETERS",
    "Pinnable",
    "prewrite",
    "quantizer",
    "raba",
    "rabb",
    "rabc",
    "rabd",
    "rabe",
    "rabf",
    "rabg",
    "restruct",
    "rocksdb",
    "Scalardata",
    "subvector",
    "taba",
    "tabb",
    "tabc",
    "tabd",
    "tabe",
    "tabf",
    "tabg",
    "topk",
    "topks",
    "topn",
    "tryload",
    "UPDATEDPATH",
    "UPDATINGPATH",
    "utxn"
  ],
  "workbench.colorTheme": "Default Dark+",
  "workbench.preferredDarkColorTheme": "Default Dark+",
  "workbench.preferredHighContrastColorTheme": "Default Dark+",
  "cpplint.cpplintPath": "/home/server/.local/bin/cpplint",
  "cpplint.lineLength": 120,
  "cpp-check-lint.cpplint.--exclude=": [],
  "C_Cpp.intelliSenseMemoryLimit": 16384,
  "typescript.tsserver.maxTsServerMemory": 30720,
  "files.maxMemoryForLargeFilesMB": 40960,
  "lldb.dbgconfig": {},
  "lldb.rpcServer": {},
  "search.followSymlinks": true,
  "editor.accessibilityPageSize": 10,
  "editor.fontSize": 14,
  /* cppcheck配置 */
  "cpp-check-lint.--enable": true, //启用插件
  "cpp-check-lint.cppcheck.--executable": "/home/server/app/cppcheck-2.10/bin/cppcheck", //cppcheck路径
  "cpp-check-lint.cppcheck.--inline-suppr": false, //取消内联
  "cpp-check-lint.cppcheck.--language=": "c++", //使用c++语言进行检查
  "cpp-check-lint.cppcheck.--onsave": false, //在文件保存时立刻检查该文件
  "cpp-check-lint.cppcheck.--quick_fix": false,
  "cpp-check-lint.cpplint.--enable": false,
  "clang-format.fallbackStyle": "Google",
  "editor.largeFileOptimizations": false,
  "c-cpp-flylint.flexelint.enable": false,
  //关闭无用的cpplint
  // "cpp-check-lint.cppcheck.--addon=": [  //暂时不开启插件
  //     "misra.py"
  // ],
  //"--path-mappings": "/data1/server/work/dingo-store=/home/server/work/dingo-store",
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // [[Terminal]]
  "terminal.integrated.fontSize": 14, // 集成终端字号
  "terminal.integrated.tabs.showActions": "always", // 始终显示“新建终端”按钮旁的“终端拆分”和“终止”按钮
  "terminal.integrated.tabs.showActiveTerminal": "always", // 集成终端启用视觉化铃声
  "terminal.integrated.gpuAcceleration": "on", // 集成终端使用GPU加速
  "terminal.integrated.rightClickBehavior": "selectWord", // 集成终端右击时选择光标下方的字词，并打开上下文菜单
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.env.windows": {
    "LC_ALL": "zh_CN.UTF-8" // 集成终端编码: zh_CN.UTF-8
  },
  // [[General]]
  "breadcrumbs.filePath": "on", // 控制是否及如何在“导航路径”视图中显示文件路径
  // window
  "window.commandCenter": true,
  // editor
  "editor.minimap.renderCharacters": false,
  "explorer.compactFolders": false, // 资源管理器不采用紧凑模式
  "editor.fontFamily": "JetBrains Mono, LXGW Bright", // 编辑器全局字体
  "editor.fontLigatures": true, // 启用连字体
  "editor.lineHeight": 0, // 行高：使用 0 根据字号自动计算行高
  "editor.bracketPairColorization.enabled": true, // 控制是否对括号着色
  "editor.bracketPairColorization.independentColorPoolPerBracketType": false, // 各类括号着色等级不独立
  "editor.guides.bracketPairs": true, // 启用括号指导线
  "editor.guides.bracketPairsHorizontal": "active", // 启用水平括号指导线
  "editor.guides.highlightActiveIndentation": false, // 禁用高亮选中的缩进指导线
  "editor.guides.indentation": false, // 禁用缩进指导线
  "editor.semanticHighlighting.enabled": true, // 颜色主题
  "editor.smoothScrolling": true, //使编辑器滚动变平滑
  "editor.tabCompletion": "on", //启用Tab补全
  "editor.cursorBlinking": "smooth", //使编辑器光标的闪烁平滑，有呼吸感
  "editor.acceptSuggestionOnEnter": "on", // 编辑器中可以用 enter 接受建议
  "editor.stickyScroll.enabled": true, // 启用粘滞滚动，即显示上一级对应的代码
  "editor.unicodeHighlight.ambiguousCharacters": false, // 不突出显示可能与基本 ASCII 字符混淆的字符
  "editor.inlayHints.enabled": "on", // 在编辑器中显示内联提示
  "editor.minimap.enabled": true, // 控制是否显示缩略图cod
  "editor.formatOnType": true, // 自动格式化
  "editor.renderWhitespace": "none", // 控制编辑器在空白字符上显示符号的方式
  "editor.snippetSuggestions": "top", // 代码片段建议置于其他建议之上
  "editor.stickyTabStops": true, // 使用空格缩进时模拟制表符的行为，可以方便对齐
  "editor.tabSize": 2, // 一个制表符 = 2个空格
  "editor.suggest.insertMode": "replace", // 建议的接受方式
  "editor.suggest.localityBonus": true, // 控制排序时是否提高靠近光标的词语的优先级
  "editor.suggest.matchOnWordStartOnly": false, // 禁用建议必须匹配开头
  "editor.suggest.shareSuggestSelections": true,
  "editor.suggest.showStatusBar": true, // 控制建议小部件底部的状态栏可见
  "editor.suggestOnTriggerCharacters": true, // 控制在键入触发字符后是否自动显示建议
  "editor.suggestSelection": "first", // 始终预先选择第一个建议
  "editor.wordBasedSuggestions": "matchingDocuments", // 控制是否根据文档中的文字提供建议列表
  "editor.autoClosingOvertype": "always", // 控制编辑器应当自动改写左引号或右引号
  "editor.detectIndentation": false, // 禁用自动检测文件缩进模式和缩进大小，即打开文件后自动将文件更改为 VSCode 配置的缩进格式
  "editor.quickSuggestionsDelay": 0, // 控制显示快速建议前的等待时间（毫秒）
  "editor.inlineSuggest.enabled": true, // 在编辑器中自动显示内联建议
  "editor.parameterHints.enabled": true, // 是否在输入时显示含有参数文档和类型信息的小面板
  // 控制是否在键入代码时自动显示建议
  "editor.quickSuggestions": {
    "comments": false, // 键入注释时不允许
    "other": true, // 键入其他时允许
    "strings": false // 键入字符串时不允许
  },
  "editor.insertSpaces": true, //敲下Tab键时插入4个空格而不是制表符
  "editor.copyWithSyntaxHighlighting": false, //复制代码时复制纯文本而不是连语法高亮都复制了
  "editor.linkedEditing": true, //html标签自动重命名（喜大普奔！终于不需要Auto Rename Tag插件了！）
  "editor.wordWrap": "on", //在文件内容溢出vscode显示区域时自动折行
  "editor.renderControlCharacters": true, //编辑器中显示不可见的控制字符
  /*terminal*/
  "terminal.integrated.cursorBlinking": true, //终端光标闪烁
  // workbench
  "workbench.startupEditor": "none", // 在没有从上一个会话恢复出信息的情况下，在启动时不打开编辑器
  "workbench.view.alwaysShowHeaderActions": true, // 显示视图头部的操作项
  //"workbench.settings.editor": "json", // 默认打开 settings.json 进行设置
  "workbench.editor.historyBasedLanguageDetection": true, // 允许语言检测使用编辑器历史记录
  "workbench.list.smoothScrolling": true, //使文件列表滚动变平滑
  "workbench.editor.enablePreview": false, //打开文件时不是“预览”模式，即在编辑一个文件时打开编辑另一个文件不会覆盖当前编辑的文件而是新建一个标签页
  "workbench.editor.wrapTabs": true, //编辑器标签页在空间不足时以多行显示
  // debug
  "debug.console.acceptSuggestionOnEnter": "on", // 调试控制台中可以用 enter 接受建议
  "debug.internalConsoleOptions": "openOnSessionStart", //每次调试都打开调试控制台，方便调试
  "debug.showBreakpointsInOverviewRuler": true, //在滚动条标尺上显示断点的位置，便于查找断点的位置
  "debug.toolBarLocation": "docked", //固定调试时工具条的位置，防止遮挡代码内容（个人喜好）
  "debug.saveBeforeStart": "nonUntitledEditorsInActiveGroup", //在启动调试会话前保存除了无标题文档以外的文档（毕竟你创建了无标题文档就说明你根本没有想保存它的意思（至少我是这样的。））
  "debug.onTaskErrors": "showErrors", //预启动任务出错后显示错误，并不启动调试
  // explorer
  "explorer.confirmDragAndDrop": false, // 移动文件时无需确认
  "explorer.confirmDelete": false, // 删除文件确认
  "explorer.incrementalNaming": "smart", // 粘贴同名文件时的重命名方式;smart: 在重复名称末尾智能地添加/递增数字
  // files
  "files.autoSave": "afterDelay", // 自动保存
  // notebook
  "notebook.lineNumbers": "on", // 控制单元格编辑器中行号的显示
  // 应该在何处显示单元格工具栏，或是否隐藏它
  "notebook.cellToolbarLocation": {
    "default": "right", // 默认: 右边
    "jupyter-notebook": "left" // jupyter-notebook: 左边
  },
  // search
  "search.showLineNumbers": true, // 显示搜索结果所在行号
  "search.smartCase": true, // 当搜索词为小写时，则不区分大小写进行搜索，否则区分大小写
  // 配置在搜索中排除的文件和文件夹的glob模式
  "search.exclude": {
    // "someFolder/": true,
    // "somefile": true
  },
  // output
  "output.smartScroll.enabled": true, // 输出窗口智能滚动：点击时锁定，点击最后一行时解锁
  // problems
  "problems.showCurrentInStatus": true, // 在状态栏显示当前问题
  "problems.sortOrder": "position", // 控制问题导航的显示顺序
  "json.schemaDownload.enable": true,
  "extensions.ignoreRecommendations": true,
  "accessibility.signals.terminalBell": {
    "sound": "on"
  },
  "terminal.integrated.enableVisualBell": true,
  "cmake.cmakePath": "/usr/local/bin/cmake",
  "clang.cxxflags": [
    "-std=c++17"
  ],
  "clang.cflags": [
    "-std=c11"
  ],
  "clang-tidy.buildPath": "build/compile_commands.json",
  "cmake.buildArgs": [
    "-DCMAKE_BUILD_TYPE=Debug -DTHIRD_PARTY_BUILD_TYPE=Debug -DBUILD_UNIT_TESTS=ON  -DBRPC_ENABLE_CPU_PROFILER=OFF -DBUILD_INTEGRATION_TESTS=ON -DDINGO_BUILD_STATIC=OFF -DCMAKE_CXX_STANDARD=17  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON "
  ],
  "cmake.parallelJobs": 40,
  // "cmakeFormat.args": [
  //   "--line-width=120",
  // ],
}